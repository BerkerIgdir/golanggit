// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    task_code
) VALUES (
    ?
) RETURNING id, task_code, task_notes, start_date, completed_date
`

func (q *Queries) CreateTask(ctx context.Context, taskCode sql.NullString) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, taskCode)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskCode,
		&i.TaskNotes,
		&i.StartDate,
		&i.CompletedDate,
	)
	return i, err
}

const finishTask = `-- name: FinishTask :one
UPDATE tasks SET completed_date=? WHERE task_code=? RETURNING id, task_code, task_notes, start_date, completed_date
`

type FinishTaskParams struct {
	CompletedDate sql.NullTime
	TaskCode      sql.NullString
}

func (q *Queries) FinishTask(ctx context.Context, arg FinishTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, finishTask, arg.CompletedDate, arg.TaskCode)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskCode,
		&i.TaskNotes,
		&i.StartDate,
		&i.CompletedDate,
	)
	return i, err
}

const updateTaskNote = `-- name: UpdateTaskNote :one
UPDATE tasks SET task_notes=? WHERE task_code=? RETURNING id, task_code, task_notes, start_date, completed_date
`

type UpdateTaskNoteParams struct {
	TaskNotes sql.NullString
	TaskCode  sql.NullString
}

func (q *Queries) UpdateTaskNote(ctx context.Context, arg UpdateTaskNoteParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskNote, arg.TaskNotes, arg.TaskCode)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskCode,
		&i.TaskNotes,
		&i.StartDate,
		&i.CompletedDate,
	)
	return i, err
}
